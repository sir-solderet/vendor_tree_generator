#!/usr/bin/env python3

from typing import List, Dict
from datetime import datetime

class VendorTreeTemplates:
    """Templates for generating vendor tree files."""
    
    def __init__(self, vendor_name: str, device_name: str, android_version: str):
        self.vendor_name = vendor_name
        self.device_name = device_name
        self.android_version = android_version
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def generate_android_mk(self, proprietary_files: List[Dict]) -> str:
        """Generate Android.mk content."""
        return f'''# Copyright (C) {datetime.now().year} The LineageOS Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by vendor_tree_generator - {self.timestamp}

LOCAL_PATH := $(call my-dir)

ifeq ($(TARGET_DEVICE),{self.device_name})

include $(CLEAR_VARS)
LOCAL_MODULE := {self.vendor_name}_{self.device_name}_vendor
LOCAL_MODULE_OWNER := {self.vendor_name}
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_CLASS := ETC
LOCAL_MODULE_PATH := $(TARGET_OUT_VENDOR)
LOCAL_UNINSTALLABLE_MODULE := true
include $(BUILD_PHONY_PACKAGE)

$(call inherit-product, vendor/{self.vendor_name}/{self.device_name}/{self.device_name}-vendor.mk)

endif
'''

    def generate_android_bp(self, proprietary_files: List[Dict]) -> str:
        """Generate Android.bp content."""
        # Group files by type
        binaries = []
        libraries = []
        
        for file_info in proprietary_files:
            rel_path = file_info['relative_path']
            if '/bin/' in rel_path:
                binaries.append(rel_path.split('/')[-1])
            elif '/lib' in rel_path and rel_path.endswith('.so'):
                libraries.append(rel_path.split('/')[-1])
        
        content = f'''// Copyright (C) {datetime.now().year} The LineageOS Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by vendor_tree_generator - {self.timestamp}

soong_namespace {{
}}

'''
        
        # Add prebuilt binaries
        for binary in sorted(set(binaries)):
            content += f'''
cc_prebuilt_binary {{
    name: "{binary}",
    owner: "{self.vendor_name}",
    strip: {{
        none: true,
    }},
    target: {{
        android_arm: {{
            srcs: ["proprietary/vendor/bin/{binary}"],
        }},
        android_arm64: {{
            srcs: ["proprietary/vendor/bin/{binary}"],
        }},
    }},
    compile_multilib: "prefer32",
    check_elf_files: false,
    vendor: true,
}}
'''
        
        # Add prebuilt libraries
        for library in sorted(set(libraries)):
            content += f'''
cc_prebuilt_library_shared {{
    name: "{library}",
    owner: "{self.vendor_name}",
    strip: {{
        none: true,
    }},
    target: {{
        android_arm: {{
            srcs: ["proprietary/vendor/lib/{library}"],
        }},
        android_arm64: {{
            srcs: ["proprietary/vendor/lib64/{library}"],
        }},
    }},
    compile_multilib: "both",
    check_elf_files: false,
    vendor: true,
}}
'''
        
        return content
    
    def generate_board_config(self) -> str:
        """Generate BoardConfig.mk content."""
        return f'''# Copyright (C) {datetime.now().year} The LineageOS Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by vendor_tree_generator - {self.timestamp}

VENDOR_PATH := vendor/{self.vendor_name}/{self.device_name}

# Vendor Security Patch Level
VENDOR_SECURITY_PATCH := 2023-12-01
'''
    
    def generate_device_vendor_mk(self, proprietary_files: List[Dict]) -> str:
        """Generate device-vendor.mk content."""
        content = f'''# Copyright (C) {datetime.now().year} The LineageOS Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by vendor_tree_generator - {self.timestamp}

PRODUCT_SOONG_NAMESPACES += \\
    vendor/{self.vendor_name}/{self.device_name}

PRODUCT_COPY_FILES += \\
'''
        
        # Add proprietary files to copy
        copy_files = []
        for file_info in proprietary_files:
            rel_path = file_info['relative_path']
            copy_files.append(f"    vendor/{self.vendor_name}/{self.device_name}/proprietary/{rel_path}:$(TARGET_COPY_OUT_VENDOR)/{rel_path}")
        
        content += " \\\n".join(copy_files)
        
        return content
